import yaml
import whisper
from gtts import gTTS
from playsound import playsound
import os
import time

from modules.asr_module import record_audio
from modules.nlp_pipeline import categorize_query
from modules.response_gen import generate_response

# Load Whisper model
print("ЁЯУв Whisper рдореЙрдбрд▓ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
whisper_model = whisper.load_model("small")
print("тЬЕ Whisper рдореЙрдбрд▓ рд▓реЛрдб рд╣реЛ рдЧрдпрд╛\n")

def load_config():
    try:
        with open("config/config.yaml", "r", encoding="utf-8") as f:
            return yaml.safe_load(f)
    except Exception as e:
        print(f"[тЭМ] config.yaml рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        return {}

def transcribe_audio(filename):
    try:
        result = whisper_model.transcribe(filename, language="hi", fp16=False)
        return result["text"].strip()
    except Exception as e:
        print(f"[тЭМ] рдЯреНрд░рд╛рдВрд╕рдХреНрд░рд┐рдкреНрд╢рди рд╡рд┐рдлрд▓: {e}")
        return ""

def speak(text):
    try:
        tts = gTTS(text=text, lang='hi')
        tts.save("response.mp3")
        playsound("response.mp3")
        os.remove("response.mp3")
    except Exception as e:
        print(f"[тЭМ] рдмреЛрд▓рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")

def main():
    config = load_config()
    if not config:
        return

    print("ЁЯдЦ VoiceBot рд╢реБрд░реВ рд╣реЛ рдЧрдпрд╛ рд╣реИред 'рдзрдиреНрдпрд╡рд╛рдж' рдпрд╛ 'thank you' рдХрд╣рдХрд░ рдмрдВрдж рдХрд░реЗрдВред\n")
    speak("рдирдорд╕реНрддреЗ! рдореИрдВ Peer to Peer Lending VoiceBot рд╣реВрдБред рдЖрдк рдореБрдЭрд╕реЗ рдкреИрд╕реЗ рдЙрдзрд╛рд░ рджреЗрдиреЗ рдпрд╛ рд▓реЗрдиреЗ рд╕реЗ рдЬреБрдбрд╝реЗ рд╕рд╡рд╛рд▓ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред")

    try:
        while True:
            print("\nЁЯОЩя╕П рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд╢реБрд░реВ...\n")
            record_audio("input.wav", config)

            print("ЁЯУЭ рдЯреНрд░рд╛рдВрд╕рдХреНрд░рд┐рдкреНрд╢рди рдЪрд▓ рд░рд╣рд╛ рд╣реИ...\n")
            user_text = transcribe_audio("input.wav")

            if not user_text:
                reply = "рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдХреБрдЫ рд╕реБрдирд╛рдИ рдирд╣реАрдВ рджрд┐рдпрд╛ред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХрд╣реЗрдВред"
            elif "рдзрдиреНрдпрд╡рд╛рдж" in user_text.lower() or "thank" in user_text.lower() or "stop" in user_text.lower():
                reply = "рдЖрдкрдХрд╛ рджрд┐рди рд╢реБрдн рд╣реЛ! рдзрдиреНрдпрд╡рд╛рджред"
                print("ЁЯдЦ рдмреЙрдЯ:", reply)
                speak(reply)
                break
            else:
                print("ЁЯЩЛтАНтЩАя╕П рдпреВрдЬрд╝рд░ рдиреЗ рдХрд╣рд╛:", user_text)
                intent = categorize_query(user_text)
                reply = generate_response(intent)

            print("ЁЯдЦ рдмреЙрдЯ:", reply)
            speak(reply)
            time.sleep(0.5)

    except KeyboardInterrupt:
        print("\nЁЯЫС рдореИрдиреНрдпреБрдЕрд▓реА рдмрдВрдж рдХрд┐рдпрд╛ рдЧрдпрд╛ред рдзрдиреНрдпрд╡рд╛рдж!")

if __name__ == "__main__":
    main()
