import yaml
import whisper
from gtts import gTTS
from playsound import playsound
import os
import time
from deep_translator import GoogleTranslator
from difflib import get_close_matches

from modules.asr_module import record_audio
from modules.nlp_pipeline import categorize_query
from modules.response_gen import generate_response

# Load Whisper model
print("ЁЯУв Whisper рдореЙрдбрд▓ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
model = whisper.load_model("medium")
print("тЬЕ Whisper рдореЙрдбрд▓ рд▓реЛрдб рд╣реЛ рдЧрдпрд╛\n")

def load_config():
    try:
        with open("config/config.yaml", "r", encoding="utf-8") as f:
            return yaml.safe_load(f)
    except Exception as e:
        print(f"[тЭМ] config.yaml рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        return {}

def transcribe_audio(filename):
    try:
        result = model.transcribe(filename, language='hi')
        transcript = result.get("text", "").strip()
        if transcript:
            return transcript
        else:
            print("тЪая╕П рдЯреНрд░рд╛рдВрд╕рдХреНрд░рд┐рдкреНрд╢рди рдЦрд╛рд▓реА рд╣реИред")
            return ""
    except Exception as e:
        print(f"[тЭМ] рдЯреНрд░рд╛рдВрд╕рдХреНрд░рд┐рдкреНрд╢рди рд╡рд┐рдлрд▓: {e}")
        return ""

def clean_transcript(text):
    keywords = [
        "рд▓реЛрди рдХреИрд╕реЗ рд▓реЗрдВ", "рдмреНрдпрд╛рдЬ рджрд░реЗрдВ", "рдХреНрдпрд╛ рдпрд╣ рд╕реБрд░рдХреНрд╖рд┐рдд рд╣реИ", "loan", "interest",
        "safe", "platform safe", "рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рд╕реБрд░рдХреНрд╖рд┐рдд рд╣реИ", "рдирд┐рд╡реЗрд╢", "register", "рд╕рдорд╕реНрдпрд╛"
    ]
    matches = get_close_matches(text.lower(), keywords, n=1, cutoff=0.6)
    return matches[0] if matches else text

def speak(text):
    try:
        tts = gTTS(text=text, lang='hi')
        tts.save("response.mp3")
        playsound("response.mp3")
        os.remove("response.mp3")
    except Exception as e:
        print(f"[тЭМ] рдмреЛрд▓рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")

def translate_to_english(text):
    try:
        return GoogleTranslator(source='auto', target='en').translate(text)
    except Exception as e:
        print(f"[тЭМ] рдЕрдиреБрд╡рд╛рдж рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        return text

def main():
    config = load_config()
    if not config:
        return

    duration = config.get("recording", {}).get("duration", 5)

    print("ЁЯдЦ VoiceBot рд╢реБрд░реВ рд╣реЛ рдЧрдпрд╛ рд╣реИред 'рдзрдиреНрдпрд╡рд╛рдж' рдпрд╛ 'thank you' рдХрд╣рдХрд░ рдмрдВрдж рдХрд░реЗрдВред\n")
    speak("рдирдорд╕реНрддреЗ! рдореИрдВ рдкреАрдпрд░ рдЯреВ рдкреАрдпрд░ рд▓реЗрдВрдбрд┐рдВрдЧ рд╡реЙрдЗрд╕рдмреЙрдЯ рд╣реВрдБред рдЖрдк рдореБрдЭрд╕реЗ рдкреИрд╕реЗ рдЙрдзрд╛рд░ рджреЗрдиреЗ рдпрд╛ рд▓реЗрдиреЗ рд╕реЗ рдЬреБрдбрд╝реЗ рд╕рд╡рд╛рд▓ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП рдкреВрдЫрд┐рдП тАУ рд▓реЛрди рдХреИрд╕реЗ рд▓реЗрдВ? рдпрд╛ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рд╕реБрд░рдХреНрд╖рд┐рдд рд╣реИ?")

    try:
        while True:
            print("\nЁЯОЩя╕П рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд╢реБрд░реВ...\n")
            record_audio("input.wav", duration)
            print("ЁЯУЭ рдЯреНрд░рд╛рдВрд╕рдХреНрд░рд┐рдкреНрд╢рди рдЪрд▓ рд░рд╣рд╛ рд╣реИ...\n")

            user_text = transcribe_audio("input.wav")
            if not user_text:
                reply = "рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдХреБрдЫ рд╕реБрдирд╛рдИ рдирд╣реАрдВ рджрд┐рдпрд╛ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдмреЛрд▓рд┐рдПред"
            elif any(word in user_text.lower() for word in ["рдзрдиреНрдпрд╡рд╛рдж", "thank", "stop", "рдмрдВрдж"]):
                reply = "рдЖрдкрдХрд╛ рджрд┐рди рд╢реБрдн рд╣реЛ! рдзрдиреНрдпрд╡рд╛рджред"
                print("ЁЯдЦ рдмреЙрдЯ:", reply)
                speak(reply)
                break
            else:
                print("ЁЯЩЛтАНтЩАя╕П рдпреВрдЬрд╝рд░ рдиреЗ рдХрд╣рд╛:", user_text)
                cleaned_text = clean_transcript(user_text)

                # Only translate if it seems necessary (basic English detection)
                needs_translation = not any(char.isalpha() and char.isascii() for char in cleaned_text)
                translated_text = translate_to_english(cleaned_text) if needs_translation else cleaned_text
                print("ЁЯМР рдЕрдиреБрд╡рд╛рджрд┐рдд:", translated_text)

                intent = categorize_query(translated_text)
                reply = generate_response(intent)

            print("ЁЯдЦ рдмреЙрдЯ:", reply)
            speak(reply)
            time.sleep(0.5)

    except KeyboardInterrupt:
        print("\nЁЯЫС рдореИрдиреНрдпреБрдЕрд▓реА рдмрдВрдж рдХрд┐рдпрд╛ рдЧрдпрд╛ред рдзрдиреНрдпрд╡рд╛рдж!")

if __name__ == "__main__":
    main()
