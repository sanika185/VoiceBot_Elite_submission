import yaml
import os
import whisper
import csv
from datetime import datetime
from gtts import gTTS
from playsound import playsound
import time
import sqlite3
import tkinter as tk
from tkinter import scrolledtext
from dotenv import load_dotenv  # Add dotenv import

from modules.asr_module import record_audio
from modules.response_gen import generate_response
from categorize_complaint import categorize_complaint
from modules.mailer import send_email

MAX_RETRIES = 3

# Load environment variables from .env
load_dotenv()

# Get sensitive info from environment variables
EMAIL_USER = os.getenv("EMAIL_USER")
EMAIL_PASS = os.getenv("EMAIL_PASS")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

print("Whisper рдореЙрдбрд▓ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
whisper_model = whisper.load_model("small")
print("Whisper рдореЙрдбрд▓ рд▓реЛрдб рд╣реЛ рдЧрдпрд╛ тЬЕ")

def load_config():
    print("Loading config...")
    with open("config/config.yaml", "r", encoding="utf-8") as file:
        return yaml.safe_load(file)

def transcribe_audio(filename):
    print("Transcribing audio using local Whisper model...")
    try:
        result = whisper_model.transcribe(filename, language="hi", fp16=False)
        print("DEBUG - Whisper raw result:", result)
        return result["text"].strip()
    except Exception as e:
        print(f"[ERROR] Transcription failed: {e}")
        return ""

def is_valid_transcript(text):
    return len(text.strip()) > 5 and any(char.isalpha() for char in text)

def get_fallback_response(attempt):
    fallback_responses = [
        "рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдЖрдкрдХреА рдмрд╛рдд рд╕рдордЭ рдирд╣реАрдВ рдЖрдИред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдмреЛрд▓реЗрдВред",
        "рдЕрдм рднреА рдирд╣реАрдВ рд╕рдордЭ рдкрд╛рдпрд╛, рдХреГрдкрдпрд╛ рд╕реНрдкрд╖реНрдЯ рдмреЛрд▓реЗрдВред",
        "рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
    ]
    return fallback_responses[min(attempt, len(fallback_responses) - 1)]

def speak(text):
    print(f"[DEBUG] Bot will speak: {text}")
    try:
        tts = gTTS(text=text, lang='hi')
        filename = "voice_output.mp3"
        tts.save(filename)
        playsound(filename)
        os.remove(filename)
    except Exception as e:
        print(f"[ERROR] Speaking failed: {e}")

def is_location_present(text):
    common_locations = ["nashik", "pune", "mumbai", "kolhapur", "delhi"]
    return any(loc.lower() in text.lower() for loc in common_locations)

def ask_for_location(config):
    speak("рдХреГрдкрдпрд╛ рд╕реНрдерд╛рди рдмрддрд╛рдПрдВ рдЬрд╣рд╛рдБ рдпрд╣ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред")
    print("рд╕реНрдерд╛рди рд░рд┐рдХреЙрд░реНрдб рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...")
    record_audio("location.wav", config)
    print("рд╕реНрдерд╛рди рд░рд┐рдХреЙрд░реНрдб рд╣реЛ рдЧрдпрд╛ тЬЕ")
    location_text = transcribe_audio("location.wav")
    print("рд╕реНрдерд╛рди:", location_text)
    return location_text if location_text else "рдЕрдЬреНрдЮрд╛рдд рд╕реНрдерд╛рди"

def log_complaint(complaint, location, bot_reply, status, category="NA"):
    log_file = "complaint_log.csv"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    file_exists = os.path.isfile(log_file)

    with open(log_file, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        if not file_exists:
            writer.writerow(["Timestamp", "Complaint", "Location", "Category", "Bot Reply", "Status"])
        writer.writerow([timestamp, complaint, location, category, bot_reply, status])

# Main CLI Logic
def main():
    print("рд╢рд┐рдХрд╛рдпрдд рдкреНрд░рдгрд╛рд▓реА рд╢реБрд░реВ рд╣реЛ рд░рд╣реА рд╣реИ...\n")
    config = load_config()
    print("рдХреЙрдиреНрдлрд╝рд┐рдЧ рд▓реЛрдб рд╣реЛ рдЧрдпрд╛ тЬЕ\n")

    for attempt in range(MAX_RETRIES):
        print("рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд╢реБрд░реВ...\n")
        try:
            record_audio("input.wav", config)
            print("рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд╕реЗрд╡ рд╣реЛ рдЧрдИ тЬЕ\n")
        except Exception as e:
            print(f"[ERROR] рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рдореЗрдВ рд╕рдорд╕реНрдпрд╛: {e}")
            speak("рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рдЖ рдЧрдИ рд╣реИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")
            continue

        user_text = transcribe_audio("input.wav")
        print("рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдиреЗ рдХрд╣рд╛:", user_text, "\n")

        if is_valid_transcript(user_text):
            user_text_norm = user_text.lower().strip()
            category, fallback = categorize_complaint(user_text_norm)

            if category == "Other/Unclear":
                print("рдмреЙрдЯ:", fallback)
                speak(fallback)
                log_complaint(user_text, "NA", fallback, "Unclear", category)
                break

            if not is_location_present(user_text):
                location = ask_for_location(config)
            else:
                location = "рдЙрд▓реНрд▓реЗрдЦрд┐рдд"

            bot_reply = f"рдЖрдкрдХреА рд╢рд┐рдХрд╛рдпрдд '{category}' рд╢реНрд░реЗрдгреА рдореЗрдВ рджрд░реНрдЬ рдХреА рдЧрдИ рд╣реИред рд╕рдВрдмрдВрдзрд┐рдд рд╡рд┐рднрд╛рдЧ рдХреЛ рд╕реВрдЪрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред"
            print("рдмреЙрдЯ:", bot_reply)
            speak(bot_reply)
            log_complaint(user_text, location, bot_reply, "Valid", category)

            # тЬЕ Send email notification securely using env variables
            subject = "рдирдИ рд╢рд┐рдХрд╛рдпрдд рдкреНрд░рд╛рдкреНрдд рд╣реБрдИ"
            body = f"""рдирдИ рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХреА рдЧрдИ рд╣реИ:
рд╢рд┐рдХрд╛рдпрдд: {user_text}
рд╕реНрдерд╛рди: {location}
рд╢реНрд░реЗрдгреА: {category}
рдмреЙрдЯ рдЬрд╡рд╛рдм: {bot_reply}
"""
            to_email = "sanikagadade641@gmail.com"

            # Use EMAIL_USER and EMAIL_PASS loaded from .env
            send_email(to_email, subject, body, "setuvani0@gmail.com", "tffrkmibpycxvntl")  # тЬЕ works, but not secure


            break
        else:
            fallback = get_fallback_response(attempt)
            print("рдмреЙрдЯ:", fallback)
            speak(fallback)
            log_complaint(user_text, "NA", fallback, "Fallback")

    else:
        final_msg = "рд╕рд┐рд╕реНрдЯрдо рдХреЛ рдЖрдкрдХреА рдмрд╛рдд рд╕рдордЭрдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
        print("\nрдмреЙрдЯ:", final_msg)
        speak(final_msg)
        log_complaint("рдЕрд╕рдорд░реНрде рдЯреНрд░рд╛рдВрд╕рдХреНрд░рд┐рдкреНрдЯ", "NA", final_msg, "Failed")

# GUI Wrapper
def gui_main():
    root = tk.Tk()
    root.title("ЁЯОд рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░реЗрдВ - Civic Voicebot")
    root.geometry("720x480")

    log_area = scrolledtext.ScrolledText(root, width=85, height=25, font=("Arial", 10))
    log_area.pack(padx=10, pady=10)

    def run_and_log():
        log_area.insert(tk.END, "ЁЯФД рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╢реБрд░реВ рд╣реЛ рд░рд╣реА рд╣реИ...\n")
        log_area.update()
        main()
        log_area.insert(tk.END, "тЬЕ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдкреВрд░реА рд╣реЛ рдЧрдИ!\n\n")
        log_area.see(tk.END)

    record_button = tk.Button(root, text="ЁЯОд рд░рд┐рдХреЙрд░реНрдб рдХрд░рдХреЗ рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░реЗрдВ", font=("Arial", 14), command=run_and_log)
    record_button.pack(pady=10)

    root.mainloop()

if __name__ == "__main__":
    gui_main()

